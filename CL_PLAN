One central version control system (atleast on per product basis).

Main/Master branch always has production ready code. System should be buildable from fresh checkout.

Automated build process (Apache Ant). Builds need to be automated to a point that they can be triggered through a CLI.

Branches must be minimized. Any temporary branch created for bug-fixes or whatever purpose should be quickly merged with the main branch.
Each branch we support requires separate build scripts/process and maintenance.
In situations when branching cannot be avoided, the same build system should be able to manage both variations of build process.

Declarative project dependency and transitive dependency resolution. (Apache IVY)
The VCS should not have dependent artifactories checked-in with the source code.
It should just be declared in separate file. (Apache Ivy)

Use a central artifact repository. Build are automatically pushed to repository and everyone has access to latest builds.

Builds should be self testing. A successfully compiled build doesn't mean it will work. Build sanity tests should be performed.

Builds should never be broken. Commits which break the build should be corrected on highest priority.
There should be no situation when builds are broken for more than a few hours.

No one commits on a broken build.

Every team member locally tests and builds his/her changes before commit.

CI build should work exactly the same as the standard local developer build. Ideally using the same build command.

Frequent code commits to avoid merge hell and quick resolution of conflicts. At least once per day.

Builds have to be fast. Longer builds defies the whole purpose of Continuous Integration because it wonâ€™t be possible to get ongoing fast feedback.
It will also hamper frequent commits.

QA teams should build automated tests that will be automatically triggered by CI server. Tests should be designed to run in parallel whenever possible.

Automated tests should include functional, api, database, stress, load, regression as well as acceptance tests.

To stress again, automated test are the most important part of any CI/CD pipeline.
Without proper automated tests that run fast, have good coverage (> 80%), and no erroneous results, there can be no successful CI/CD pipeline.

If any tests requires a certain setup, the setup creation should also be automated.

Unit tests must be written by developers. Build scripts should run unit testing and module integration testing automatically.

If possible, we should create and test mailline builds on a duplicate of production environment for having more confidence on builds.

CI server automatically triggers builds and the testing suite on per check-in basis using polling/webhooks etc.

CI server notifies all the stakeholders about the status of their builds.

If manual testing is a step, it will not be a part of build feedback loop, closed-loop process or monitoring.
QA team is responsible for notifying dev in case of any failures in this step

Static code analysis, code style confirmation tests and architectural tests, trend reports etc can be optional part of CI pipeline.
